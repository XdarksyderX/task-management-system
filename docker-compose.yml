services:
  db:
    image: postgres:15
    container_name: tms_db
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    container_name: tms_redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  web:
    build:
      context: ./django_backend
      dockerfile: Dockerfile
    container_name: tms_web
    restart: unless-stopped
    env_file: .env
    command: ["/app/scripts/entrypoint.sh", "asgi"]
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./django_backend:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/healthz/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  worker:
    build:
      context: ./django_backend
      dockerfile: Dockerfile
    container_name: tms_worker
    restart: unless-stopped
    env_file: .env
    command: ["/app/scripts/entrypoint.sh", "worker"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./django_backend:/app

  beat:
    build:
      context: ./django_backend
      dockerfile: Dockerfile
    container_name: tms_beat
    restart: unless-stopped
    env_file: .env
    command: ["/app/scripts/entrypoint.sh", "beat"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./django_backend:/app
      - celery_beat_data:/app/celery_beat_data
  analytics:
    build:
        context: ./flask_analytics
        dockerfile: Dockerfile
    env_file: .env
    command: ["/app/entrypoint.sh","backend"]
    ports:
      - 5000:5000
    environment:
      WAIT_FOR: "redis,db"
    volumes:
      - reports_data:/reports
    depends_on:
      web: 
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  rq-worker-analytics:
    build:
        context: ./flask_analytics
        dockerfile: Dockerfile
    env_file: .env
    command: ["/app/entrypoint.sh","worker"]
    environment:
      WAIT_FOR: "redis"
      RQ_QUEUES: "reports"
    volumes:
      - reports_data:/reports
    depends_on:
      - analytics 
      - redis

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD-SHELL", "bash -lc '</dev/tcp/127.0.0.1/2181'"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_HEAP_OPTS: "-Xms256m -Xmx512m"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "bash -lc 'kafka-broker-api-versions --bootstrap-server localhost:9092 >/dev/null 2>&1'"]
      interval: 10s
      timeout: 5s
      retries: 12

  kafbat:
    image: ghcr.io/kafbat/kafka-ui:latest
    container_name: kafbat
    restart: unless-stopped
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: "true"
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'"]
      interval: 10s
      timeout: 5s
      retries: 10

  flower:
    image: mher/flower:2.0.1
    container_name: tms_flower
    restart: unless-stopped
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: ${FLOWER_BASIC_AUTH:-admin:admin}
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
      worker:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport urllib.request; urllib.request.urlopen('http://localhost:5555/'); print('OK')\nPY"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka-init:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      BOOTSTRAP: "kafka:9092"
      TOPICS: "task-events,user-activities,system-notifications,analytics-events"
      PARTITIONS: "3"
      REPLICATION: "1"
    entrypoint: ["/bin/bash", "-lc"]
    command: >
      '
      IFS="," read -ra TLIST <<< "$$TOPICS";
      for t in "$${TLIST[@]}"; do
        echo "Creating topic $$t ...";
        kafka-topics --bootstrap-server "$$BOOTSTRAP" \
                      --create --if-not-exists \
                      --topic "$$t" \
                      --partitions "$$PARTITIONS" \
                      --replication-factor "$$REPLICATION";
      done;
      echo "Existing topics:";
      kafka-topics --bootstrap-server "$$BOOTSTRAP" --list;
      '
    restart: "no"

  consumer-activity-feed:
    build: ./kafka
    container_name: consumer-activity-feed
    env_file: [.env]
    environment:
      ROLE: activity-feed
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPICS: user-activities,task-events
      KAFKA_GROUP_ID: tms-activity
      KAFKA_AUTO_OFFSET_RESET: earliest
      PG_DSN: ${PG_DSN}
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  consumer-search-index:
    build: ./kafka
    container_name: consumer-search-index
    env_file: [.env]
    environment:
      ROLE: search-index
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPICS: task-events
      KAFKA_GROUP_ID: tms-search
      KAFKA_AUTO_OFFSET_RESET: earliest
      PG_DSN: ${PG_DSN}
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  consumer-audit:
    build: ./kafka
    container_name: consumer-audit
    env_file: [.env]
    environment:
      ROLE: audit
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPICS: user-activities,system-notifications
      KAFKA_GROUP_ID: tms-audit
      KAFKA_AUTO_OFFSET_RESET: earliest
      PG_DSN: ${PG_DSN}
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  consumer-notifications:
    build: ./kafka
    container_name: consumer-notifications
    env_file: [.env]
    environment:
      ROLE: notifications
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPICS: task-events,system-notifications
      KAFKA_GROUP_ID: tms-notifications
      KAFKA_AUTO_OFFSET_RESET: earliest
      REDIS_URL: redis://${REDIS_HOST}:${REDIS_PORT}/1
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped

  consumer-analytics:
    build: ./kafka
    container_name: consumer-analytics
    env_file: [.env]
    environment:
      ROLE: analytics
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPICS: analytics-events,task-events
      KAFKA_GROUP_ID: tms-analytics
      KAFKA_AUTO_OFFSET_RESET: earliest
      REDIS_URL: ${ANALYTICS_REDIS_URL}
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped

volumes:
  db-data:
  flower-data:
  reports_data:
  celery_beat_data:
  zookeeper-data:
  zookeeper-log:
  kafka-data: